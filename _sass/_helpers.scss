// MIXINS
@mixin castShadow($length: .6, $fade: .1){
	box-shadow: 0 (4px * $length) (4px * $length) rgba(0, 0, 0, $fade),
							0 (8px * $length) (8px * $length) rgba(0, 0, 0, $fade),
							0 (16px * $length) (16px * $length) rgba(0, 0, 0, $fade);
}

@mixin columns($count: 2, $gap: 1rem, $width: 350px){
	-webkit-column-count: $count;
	-moz-column-count: $count;
	column-count: $count;
	-webkit-column-gap: $gap;
	-moz-column-gap: $gap;
	column-gap: $gap;
	-webkit-column-width: $width;
	-moz-column-width: $width;
	column-width: $width;
}

@mixin breakInside($type: avoid){
	-webkit-column-break-inside: $type;
	page-break-inside: $type;
	break-inside: $type;
}

//FUNCTIONS
// @function pow($number, $exp) {
//   $value: 1;
//   @if $exp > 0 {
//     @for $i from 1 through $exp {
//       $value: $value * $number;
//     }
//   }
//   @else if $exp < 0 {
//     @for $i from 1 through -$exp {
//       $value: $value / $number;
//     }
//   }
//   @return $value;
// }

// @function sin($angle) {
//   $sin: 0;
//   $angle: rad($angle);
//   // Iterate a bunch of times.
//   @for $i from 0 through 10 {
//     $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
//   }
//   @return $sin;
// }

// @function cos($angle) {
//   $cos: 0;
//   $angle: rad($angle);
//   // Iterate a bunch of times.
//   @for $i from 0 through 10 {
//     $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
//   }
//   @return $cos;
// }

// @function tan($angle) {
//   @return sin($angle) / cos($angle);
// }

// @function long-shadow( $color: #333, $length: 100, $direction: to bottom left, $fade: true, $shadow-count: 100) {
//   $shadows: ();
//   $conversion-map: (
//     to top: 180deg,
//     to top right: 135deg,
//     to right top: 135deg,
//     to right: 90deg,
//     to bottom right: 45deg,
//     to right bottom: 45deg,
//     to bottom: 0deg,
//     to bottom left: 315deg,
//     to left bottom: 315deg,
//     to left: 270deg,
//     to left top: 225deg,
//     to top left: 225deg
//   );

//   @if map-has-key($conversion-map, $direction) {
//     $direction: map-get($conversion-map, $direction);
//   }

//   @for $i from 1 through $shadow-count {
//     $current-step: ($i * $length / $shadow-count);
//     $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));

//     $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
//   }

//   @return $shadows;
// }


// PLACEHOLDERS
%main-wrapper-styles {
	width: $content-width;
	max-width: $content-max-width;
	margin: 0 auto;
}

%top-offset-wrapper-styles {
	@extend %main-wrapper-styles;
	margin: -3.5em auto 0;
}
